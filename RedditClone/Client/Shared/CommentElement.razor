@inherits BaseElement

@inject IUserService UserService
@inject ICommentService CommentService
@inject NavigationManager NavMan

<details class="p-2 my-3 border border-1 border-primary rounded-1 bg-primary bg-gradient bg-opacity-10" open>
    @if(_author != null)
    {
        <summary class="rounded-1 bg-light mb-1 p-1">
            <a href="/u/@_author.Username" class="fw-bold text-decoration-none">@_author.Username</a> 
            <span class="fw-bold">@(Comment.VotesUp - Comment.VotesDown) points</span> 
            <span class="text-muted" title="@Comment.DatePosted.ToLocalTime().ToString("ddd MMM dd yyyy HH:mm:ss UTC zzz")">@Utils.FormatTime(Comment.DatePosted)</span>
            @if(Comment.Edited)
            {
                <span class="text-muted" title="@Comment.DateEdited.ToLocalTime().ToString("ddd MMM dd yyyy HH:mm:ss UTC zzz")">* (last edited @Utils.FormatTime(Comment.DateEdited))</span>
            }
        </summary>
        <div class="d-flex align-top bg-white rounded-1 p-1">
            <div class="d-inline-flex flex-column">
                <div class="align-self-start"><span class="oi oi-chevron-top"></span></div>
                <div class="align-self-end"><span class="oi oi-chevron-bottom"></span></div>
            </div>
            <div class="w-100 d-inline-flex flex-column ms-3 mt-2">
                <div class="d-flex flex-row">

                @if (_editing)
                {
                    <CommentReplyElement CommentAuthor="CurrentUser" ParentComment="Comment" ParentPost="Comment.Post" Cancel="Cancel" Editing="true" Content="@Comment.Content" />
                }
                else if(_source)
                {
                    <form class="w-100">
                        <textarea class="form-control" value="@Comment.Content" rows="@_lines" readonly></textarea>
                        <button type="button" class="btn btn-primary my-3" @onclick="Cancel"><span class="oi oi-x"> </span> Close</button>
                    </form>
                }
                else
                {
                    <span class="mb-2">@((MarkupString)Markdig.Markdown.ToHtml(Comment.Content).Replace("<p>", "<p  class=\"mb-1\">"))</span>
                }
                </div>
                <div class="d-inline-flex flex-row">
                    <AuthorizeView>
                        <Authorized>
                            <button class="p-0 me-3 btn btn-link text-decoration-none text-body fw-bold" @onclick="Replying">reply</button>
                            @if(Comment.AuthorID == CurrentUser.Id)
                            {
                                <button class="p-0 me-3 btn btn-link text-decoration-none text-body fw-bold" @onclick="Editing">edit</button>
                            }
                        </Authorized>
                        <NotAuthorized>
                            <a href="/login?returnurl=@NavMan.Uri" class="p-0 me-3 btn btn-link text-decoration-none text-body fw-bold">reply</a>
                        </NotAuthorized>
                    </AuthorizeView>
                    <button class="p-0 me-3 btn btn-link text-decoration-none text-muted fw-bold" @onclick="ShowSource">source</button>
                    <button class="p-0 me-3 btn btn-link text-decoration-none text-muted fw-bold">permalink</button>
                    <button class="p-0 me-3 btn btn-link text-decoration-none text-muted fw-bold">report</button>
                </div>
            </div>
        </div>
        @if (_replying)
        {
            <CommentReplyElement CommentAuthor="CurrentUser" ParentComment="Comment" ParentPost="Comment.Post" Cancel="Cancel" />
        }
        @if(_children.Any())
        {
            foreach(var c in _children)
            {
                <CommentElement Comment="c"></CommentElement>
            }
        }
    }
    else
    {
        <summary>
            Loading...
        </summary>
        <p>Loading...</p>
    }
</details>

@code {
    [Parameter]
    public Comment Comment { get; set; } = new();

    User _author = new User { Username = "Loading..." };
    List<Comment> _children = new();

    bool _replying, _editing, _source;
    int _lines;

    protected override async Task OnParametersSetAsync()
    {
        var getAuthor = await UserService.GetUserByIdAsync(Comment.AuthorID);
        if(getAuthor != null && getAuthor.Success && getAuthor.Data != null)
        {
            _author = getAuthor.Data;
            _children = await GetChildren(Comment.HashId);
        }
        _lines = Comment.Content.Count(c => c.Equals('\n')) + 1;
    }

    async Task<List<Comment>> GetChildren(string hash)
    {
        List<Comment> retval = new();
        var getChildren = await CommentService.GetCommentsByParentHashAsync(hash);
        if (getChildren != null && getChildren.Success && getChildren.Data != null)
        {
            retval = getChildren.Data;
        }
        return retval;
    }

    void Replying()
    {
        _replying = true;
    }

    void Editing()
    {
        _editing = true;
    }

    void ShowSource()
    {
        _source = true;
    }

    void Cancel()
    {
        _replying = false;
        _editing = false;
        _source = false;
    }
}
