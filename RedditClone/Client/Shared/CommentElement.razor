@inherits BaseElement

@inject IUserService UserService
@inject ICommentService CommentService
@inject NavigationManager NavMan
@inject ILocalStorageService LocalStorage

<div class="d-flex my-3 border border-1 rounded-1">
    <details class="p-2 w-100 @_bg bg-gradient" open=@_open>
        @if(_author != null)
        {
            <summary class="rounded-1 bg-light mb-1 p-1" @onclick="ToggleDetails">
                <a href="/u/@_author.Username" class="fw-bold text-decoration-none">@_author.Username</a>
                <span class="fw-bold me-2">@_points @(_points == 1 || _points == -1 ? "point" : "points")</span>
                @if(!_open && Comment.Points < 1)
                {
                    <span class="text-muted fst-italic me-2">comment score below threshold</span>
                }
                <span class="text-muted" title="@Comment.DatePosted.ToLocalTime().ToString("ddd MMM dd yyyy HH:mm:ss UTC zzz")">@Utils.FormatTime(Comment.DatePosted)</span>
                @if(Comment.Edited)
                {
                    <span class="text-muted" title="@Comment.DateEdited.ToLocalTime().ToString("ddd MMM dd yyyy HH:mm:ss UTC zzz")">* (last edited @Utils.FormatTime(Comment.DateEdited))</span>
                }
                <span class="text-light clearfix float-end">#@Comment.HashId</span>
            </summary>
            <div class="d-flex align-top bg-white rounded-1 p-1">
                <div class="d-inline-flex flex-column">
                    <div class="align-self-start"><button class="btn btn-link text-decoration-none @(_voteType == VoteType.Up ? "text-primary" : "text-muted")" type="button" @onclick="UpVote"><span class="oi oi-chevron-top"></span></button></div>
                    <div class="align-self-end"><button class="btn btn-link text-decoration-none @(_voteType == VoteType.Down ? "text-danger" : "text-muted")" type="button" @onclick="DownVote"><span class="oi oi-chevron-bottom"></span></button></div>
                </div>
                <div class="w-100 d-inline-flex flex-column ms-3 mt-2">
                    <div class="d-flex flex-row">

                    @if (_editing)
                    {
                            <CommentEditElement Comment="Comment" Cancel="Cancel" CommentAuthor="_author" />
                    }
                    else if(_source)
                    {
                        <form class="w-100">
                            <textarea class="form-control" value="@Comment.Content" rows="@_lines" readonly></textarea>
                            <button type="button" class="btn btn-primary my-3" @onclick="Cancel"><span class="oi oi-circle-x"> </span> Close</button>
                        </form>
                    }
                    else
                    {
                        <span class="mb-2">@((MarkupString)Markdig.Markdown.ToHtml(Comment.Content).Replace("<p>", "<p  class=\"mb-1\">"))</span>
                    }
                    </div>
                    <div class="d-inline-flex flex-row">
                        <AuthorizeView>
                            <Authorized>
                                <button class="p-0 me-3 btn btn-link text-decoration-none text-body fw-bold" @onclick="Replying">reply</button>
                                @if(Comment.AuthorId == CurrentUser.Id)
                                {
                                    <button class="p-0 me-3 btn btn-link text-decoration-none text-body fw-bold" @onclick="Editing">edit</button>
                                }
                            </Authorized>
                            <NotAuthorized>
                                <a href="/login?returnurl=@NavMan.Uri" class="p-0 me-3 btn btn-link text-decoration-none text-body fw-bold">reply</a>
                            </NotAuthorized>
                        </AuthorizeView>
                        <button class="p-0 me-3 btn btn-link text-decoration-none text-muted fw-bold" @onclick="ShowSource">source</button>
                        <button class="p-0 me-3 btn btn-link text-decoration-none text-muted fw-bold" @onclick="PermaLink">permalink</button>
                        <button class="p-0 me-3 btn btn-link text-decoration-none text-muted fw-bold">report</button>
                    </div>
                </div>
            </div>
            @if (_replying)
            {
                <CommentReplyElement CommentAuthor="CurrentUser" ParentComment="Comment" ParentPost="Comment.Post" Cancel="Cancel" />
            }
            @if(!HideChildren && _children.Any())
            {
                foreach(var c in _children)
                {
                    <CommentElement Comment="c" OddChild="!OddChild" CollapseLowScore="CollapseLowScore"></CommentElement>
                }
            }
        }
        else
        {
            <summary>
                Loading...
            </summary>
            <p>Loading...</p>
        }
    </details>
</div>
@code {
    [Parameter]
    public Comment Comment { get; set; } = new();

    [Parameter]
    public bool HideChildren { get; set; }

    [Parameter]
    public bool OddChild { get; set; }

    [Parameter]
    public bool CollapseLowScore { get; set; }

    User _author = new User { Username = "Loading..." };
    User _user = new();
    List<Comment> _children = new();

    bool _replying, _editing, _source, _open, _collapsed;
    int _lines, _points;
    string _bg = string.Empty;
    string _token = string.Empty;
    string _collapse = "true";
    VoteType _voteType = VoteType.None;

    protected override async Task OnInitializedAsync()
    {
        var getAuthor = await UserService.GetUserByIdAsync(Comment.AuthorId);
        if(getAuthor != null && getAuthor.Success && getAuthor.Data != null)
        {
            _author = getAuthor.Data;
            _children = await GetChildren(Comment.HashId);
        }

        _token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(_token))
        {
            var user = await UserService.GetUserByTokenAsync(_token);
            if (user != null)
            {
                if (user.Success && user.Data != null)
                {
                    _user = user.Data;
                    CurrentUser = _user;
                }
            }
        }

        _lines = Comment.Content.Count(c => c.Equals('\n')) + 1;

        _bg = OddChild ? "bg-secondary bg-opacity-10 border-secondary" : "bg-white bg-opacity-100 border-primary";

        await FetchCommentData();

        if(await LocalStorage.ContainKeyAsync(Comment.HashId))
        {
            _open = await LocalStorage.GetItemAsync<bool>(Comment.HashId);
        }
        else
        {
            _open = !CollapseLowScore || _points > 0;
        }
        _collapsed = _open;
    }

    async Task FetchCommentData()
    {
        var getComment = await CommentService.GetCommentByHashAsync(Comment.HashId);
        if (getComment == null || !getComment.Success || getComment.Data == null)
        {
            return;
        }

        Comment = getComment.Data;
        _points = Comment.FuzzyPoints;

        if (!string.IsNullOrEmpty(_token))
        {
            var getVote = await CommentService.GetCommentVoteAsync(new VoteDTO { Token = _token, Hash = Comment.HashId });
            if (getVote != null && getVote.Success && getVote.Data != null)
            {
                _voteType = getVote.Data.VoteType;
            }
        }
    }

    async Task UpVote()
    {
        if (string.IsNullOrEmpty(_token))
        {
            NavMan.NavigateTo($"/login?returnUrl={NavMan.Uri}");
            return;
        }

        if (_voteType == VoteType.Up)
        {
            await CommentService.UnVoteCommentAsync(new VoteDTO { Token = _token, Hash = Comment.HashId, Existing = true });
            _points--;
            _voteType = VoteType.None;
        }
        else if (_voteType == VoteType.Down)
        {
            await CommentService.UpVoteCommentAsync(new VoteDTO { Token = _token, Hash = Comment.HashId, Existing = true });
            _points += 2;
            _voteType = VoteType.Up;
        }
        else
        {
            await CommentService.UpVoteCommentAsync(new VoteDTO { Token = _token, Hash = Comment.HashId, Existing = false });
            _points++;
            _voteType = VoteType.Up;
        }
        await FetchCommentData();
        StateHasChanged();
    }

    async Task DownVote()
    {
        if (string.IsNullOrEmpty(_token))
        {
            NavMan.NavigateTo($"/login?returnUrl={NavMan.Uri}");
            return;
        }

        if (_voteType == VoteType.Down)
        {
            await CommentService.UnVoteCommentAsync(new VoteDTO { Token = _token, Hash = Comment.HashId, Existing = true });
            _points++;
            _voteType = VoteType.None;
        }
        else if (_voteType == VoteType.Up)
        {
            await CommentService.DownVoteCommentAsync(new VoteDTO { Token = _token, Hash = Comment.HashId, Existing = true });
            _points -= 2;
            _voteType = VoteType.Down;
        }
        else
        {
            await CommentService.DownVoteCommentAsync(new VoteDTO { Token = _token, Hash = Comment.HashId, Existing = false });
            _points--;
            _voteType = VoteType.Down;
        }
        await FetchCommentData();
        StateHasChanged();
    }

    async Task<List<Comment>> GetChildren(string hash)
    {
        List<Comment> retval = new();
        var getChildren = await CommentService.GetCommentsByParentHashAsync(hash);
        if (getChildren != null && getChildren.Success && getChildren.Data != null)
        {
            retval = getChildren.Data;
            retval = retval.OrderByDescending(c => c.Points).ToList();
        }
        return retval;
    }

    void Replying()
    {
        _replying = true;
    }

    void Editing()
    {
        _editing = true;
    }

    void ShowSource()
    {
        _source = true;
    }

    void PermaLink()
    {
        NavMan.NavigateTo($"/b/{Comment.Post.Board.Name}/comments/{Comment.Post.HashId}/c/{Comment.HashId}", true);
    }

    void Cancel()
    {
        _replying = false;
        _editing = false;
        _source = false;
    }

    async Task ToggleDetails()
    {
        _collapsed = !_collapsed;
        await LocalStorage.SetItemAsync(Comment.HashId, _collapsed);
    }
}
