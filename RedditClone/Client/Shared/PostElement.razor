@inject ICommentService CommentService
@inject IUserService UserService

@if(Post == null)
{
    <div>
        <div>#</div>
        <div>ICO</div>
        <div>Loading...</div>
        <div>Tag</div>
        <div>
            <div><h2>+</h2></div>
            <div>
                <div>Loading...</div>
                <div>Loading...</div>
                <div>Loading...</div>
            </div>
        </div>
    </div>
}
else
{
    <div class="d-flex align-items-center">
        <div class="d-flex flex-column h-100 m-2"><h3 class="m-0 p-0 text-muted">@Number</h3></div>
        <div class="d-inline-flex flex-column m-3">
            <div class="fs-6 align-self-center"><span class="oi oi-chevron-top"></span></div>
            <div class="fs-3 align-self-center">@_points</div>
            <div class="fs-6"><span class="oi oi-chevron-bottom"></span></div>
        </div>
        <div class="d-flex flex-column h-100 m-2"><span class="border border-1 border-dark rounded-circle oi @_postType fs-2 p-4"></span></div>
        <div class="d-flex flex-column h-100 m-2 flex-fill">
            <div class="d-flex align-top"><a href="@_link" class="fs-4 text-decoration-none">@Post.Title</a> <span class="text-muted ms-2 align-self-center">(@_baseLink)</span> <span class="m-auto ms-2 badge bg-secondary">Tag</span></div>
            <div class="d-flex align-bottom">
                <div class="d-flex flex-column align-top">
                    @*<span class="fs-1">+</span> TODO: expando*@ 
                    <div class="mb-1">
                        Submitted <span title="@Post.DatePosted">@Utils.FormatTime(Post.DatePosted)</span> by <a href="/u/@_author.Username">@_author.Username</a>
                        @if(ShowBoardName)
                        {
                            <span> in <a href="/b/@Post.Board.Name">@Post.Board.Name</a></span>
                        }
                    </div>
                    <div>
                        @if(Post.Board.Nsfw)
                        {
                            <span class="me-3 border border-1 border-danger text-danger rounded-3 p-1" style="font-size:smaller">NSFW</span>
                        }
                        <a href="@_commentLink">@_commentCount @(_commentCount == 1 ? "comment" : "comments")</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public Post Post { get; set; } = new();
    [Parameter]
    public int Number { get; set; }
    [Parameter]
    public bool ShowBoardName { get; set; }
    int _commentCount, _points;
    string _link = string.Empty;
    string _baseLink = string.Empty;
    string _commentLink = string.Empty;
    string _postType = "oi-copywriting";
    User _author = new User { Username = "Loading..." };

    protected override async Task OnParametersSetAsync()
    {
        var getCount = await CommentService.CountCommentsByPostHashAsync(Post.HashId);
        if(getCount != null && getCount.Success)
        {
            _commentCount = getCount.Data;
        }

        _points = Post.VotesUp - Post.VotesDown;
        _commentLink = $"/b/{Post.Board.Name}/comments/{Post.HashId}";
        _link = string.IsNullOrEmpty(Post.Link) ? _commentLink : Post.Link;
        _postType = string.IsNullOrEmpty(Post.Link) ? "oi-copywriting" : "oi-link-intact";

        var getAuthor = await UserService.GetUserByIdAsync(Post.AuthorId);
        if(getAuthor != null && getAuthor.Success && getAuthor.Data != null)
        {
            _author = getAuthor.Data;
        }

        if (!string.IsNullOrEmpty(Post.Link))
        {
            var uri = new Uri(Post.Link);
            _baseLink = uri.Host;
        }
        else
        {
            _postType = "oi-copywriting";
            _baseLink = $"self.{Post.Board.Name}";
        }
    }
}
