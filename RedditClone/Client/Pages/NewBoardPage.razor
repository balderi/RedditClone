@inject IUserService UserService
@inject IBoardService BoardService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavMan

@page "/create-board"

<h3>Create a new board</h3>

<AuthorizeView>
    <Authorized>
        <div class="d-flex w-50">
            <EditForm Context="board" Model="_model" class="w-100" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator />
                @if(_user != null)
                {
                    <p class="text-muted text-decoration-none">as <a href="/u/@_user.Username">@_user.Username</a></p>
                }
                else
                {
                    <p class="text-muted text-decoration-none">Loading user...</p>
                }
                <div class="mb-3">
                    <label for="boardName" class="form-label d-flex">Name <span class="text-danger">*</span> <span class="ms-auto text-muted">@(_model.Name.Length - 3)/32</span></label>
                    <EventInputText class="form-control" id="boardName" @bind-Value="_model.Name"></EventInputText>
                    <ValidationMessage For="() => _model.Name" />
                </div>
                <div class="mb-3">
                    <label for="boardDesc" class="form-label">Description</label>
                    <InputTextArea class="form-control" id="boardDesc" rows="5" @bind-Value="_model.Description"></InputTextArea>
                    <ValidationMessage For="() => _model.Description" />
                </div>
                <div class="mb-3 form-check">
                    <label for="boardNsfw" class="form-label">18+ / NSFW</label>
                    <InputCheckbox class="form-check-input" id="boardNsfw" @bind-Value="_model.Nsfw"></InputCheckbox>
                </div>
                <button type="submit" class="btn btn-primary">
                    Submit
                </button>
            </EditForm>
        </div>
    <p>@_message</p>
    </Authorized>
    <NotAuthorized>
        <p>Please <a href="/login?returnurl=@NavMan.Uri">sign in</a> or <a href="/register">sign up</a> to create a board.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    BoardNew _model = new();
    User? _user;
    string _message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var user = await UserService.GetUserByTokenAsync(token);
            if (user != null)
            {
                if (user.Success && user.Data != null)
                {
                    _user = user.Data;
                    _model.Owner = _user;
                }
                else
                {
                    _message = user.Message;
                }
            }
            else
            {
                _message = "You need to log in first, buddy...";
            }
        }
    }

    async Task OnSubmit()
    {
        var result = await BoardService.AddBoardAsync(_model);
        if(result != null)
        {
            if(result.Success && result.Data != null)
            {
                _message = "Board added!";
                NavMan.NavigateTo($"/b/{result.Data.Name}", true);
            }
            else
            {
                _message = result.Message;
            }
        }
        else
        {
            _message = "API call failed";
        }
    }
}
