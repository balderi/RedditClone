@inject IPostService PostService
@inject ICommentService CommentService
@inject IUserService UserService

@page "/u/{UserName}"

@if(!_userExists)
{
    <h3>The user <span class="font-monospace">@UserName</span> does not exist...</h3>
}
else
{
    <h3>Overview for @UserName</h3>
    <hr />
    @if(_submissions == null)
    {
        <p>Loading Posts...</p>
    }
    else
    {
        <p>@_test</p>
        @foreach (var s in _submissions.Distinct())
        {
            if(s is Post)
            {
                <PostElement Post="s as Post" />
            }
            if(s is Comment)
            {
                <CommentElement Comment="s as Comment" HideChildren="true" />
            }
        }
    }
}



@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; } = new();

    [Parameter]
    public string UserName { get; set; } = string.Empty;

    User _user = new();
    List<Post> _posts = new();
    List<Comment> _comments = new();
    List<ISubmission> _submissions = new();

    bool _userExists = true;

    string _test = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (Layout.CurrentBoard != null)
        {
            Layout.CurrentBoard = null;
        }

        var getUser = await UserService.GetUserByNameAsync(UserName);
        if(getUser != null && getUser.Success && getUser.Data != null)
        {
            _user = getUser.Data;
            var getPosts = await PostService.GetPostsByAuthorAsync(_user.Guid);
            if (getPosts != null && getPosts.Success && getPosts.Data != null)
            {
                _posts = getPosts.Data;
                _submissions.AddRange(_posts);
                _test += $"{_posts.Count} posts | ";
            }
            var getComments = await CommentService.GetCommentsByAuthorAsync(_user.Guid);
            if (getComments != null && getComments.Success && getComments.Data != null)
            {
                _comments = getComments.Data;
                _submissions.AddRange(_comments);
                _test += $"{_comments.Count} comments | ";
            }
        }
        else
        {
            _userExists = false;
        }
        _test += $"{_submissions.Count} submissions";

        _submissions = _submissions.Distinct().OrderByDescending(s => s.DatePosted).ToList();
    }
}
