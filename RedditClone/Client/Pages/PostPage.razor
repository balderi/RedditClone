@inherits BaseElement

@inject IBoardService BoardService
@inject IPostService PostService
@inject ICommentService CommentService
@inject IUserService UserService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavMan

@page "/b/{BoardName}/comments/{PostHash}"
@page "/b/{BoardName}/comments/{PostHash}/c/{CommentHash}"

@if(_postExists)
{
    if(string.IsNullOrEmpty(_post.Title))
    {
        <div class="d-flex mb-3">
            <div class="d-flex align-items-center">
                <div class="d-inline-flex flex-column">
                    <div class="fs-6 align-self-center"><span class="oi oi-chevron-top"></span></div>
                    <div class="fs-3 align-self-center">@_points</div>
                    <div class="fs-6"><span class="oi oi-chevron-bottom"></span></div>
                </div>
                <div class="d-inline-flex mx-3">
                    <span class="border border-1 border-dark rounded-circle oi oi-copywriting fs-2 p-3"></span>
                </div>
            </div>
            <div class="d-flex flex-column flex-fill">
                <div class="">
                    <div class="d-inline">
                        <p class="fs-4 placeholder-glow">
                            <span class="placeholder col-2"></span> <span class="placeholder col-1"></span> <span class="placeholder col-1"></span> <span class="placeholder col-3"></span>
                        </p>
                    </div>
                </div>
                <div class="">
                    <p class="fs-6"><span class="placeholder col-3"></span> <span class="placeholder col-2"></span> <span class="placeholder col-1"></span> <span class="placeholder col-3"></span></p>
                    </div>
                <div class="border border-dark border-1 rounded-2 p-2">
                    <p class="placeholder-glow">
                        <span class="placeholder col-2"></span> <span class="placeholder col-4"></span> <span class="placeholder col-1"></span> <span class="placeholder col-5"></span>
                        <span class="placeholder col-3"></span> <span class="placeholder col-2"></span> <span class="placeholder col-4"></span> <span class="placeholder col-1"></span>
                        <span class="placeholder col-3"></span> <span class="placeholder col-2"></span> <span class="placeholder col-4"></span> <span class="placeholder col-1"></span>
                    </p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex mb-3">
            <div class="d-flex align-items-start">
                <div class="d-inline-flex flex-column">
                    <div class="fs-6"><span class="oi oi-chevron-top"></span></div>
                    <div class="fs-3">@_points</div>
                    <div class="fs-6"><span class="oi oi-chevron-bottom"></span></div>
                </div>
                <div class="d-inline-flex mx-3">
                    <span class="border border-1 border-dark rounded-circle oi @_postType fs-2 p-3"></span>
                </div>
            </div>
            <div class="d-flex flex-column flex-fill">
                <div class="">
                    <div class="d-inline me-1 badge bg-secondary">tag</div>
                    <div class="d-inline"><a href="@_link" class="fs-4 text-decoration-none">@_post.Title</a> <span class="text-muted">(@_baseLink)</span></div>
                </div>
                <div class="">
                    <p class="fs-6">Submitted 
                        <span title="@_post.DatePosted.ToLocalTime().ToString("ddd MMM dd yyyy HH:mm:ss UTC zzz")">@Utils.FormatTime(_post.DatePosted)</span> 
                        @if(_post.Edited)
                        {
                            <span title="@_post.DateEdited.ToLocalTime().ToString("ddd MMM dd yyyy HH:mm:ss UTC zzz")">* (last edited @Utils.FormatTime(_post.DateEdited))</span>
                        }
                        by 
                        <a href="/u/@_author.Username">@_author.Username</a>
                    </p>
                </div>
                @if(!string.IsNullOrEmpty(_post.Content))
                {
                    <div class="border border-dark border-1 rounded-2 p-2">
                        @if (_editing)
                        {
                            <PostEditElement Post="_post" PostAuthor="_author" Cancel="Cancel" />
                        }
                        else if(_source)
                        {
                            <form class="w-100">
                                <textarea class="form-control" value="@_post.Content" rows="@_lines" readonly></textarea>
                                <button type="button" class="btn btn-primary my-3" @onclick="Cancel"><span class="oi oi-circle-x"> </span> Close</button>
                            </form>
                        }
                        else
                        {
                            <span class="mb-2">@((MarkupString)Markdig.Markdown.ToHtml(_post.Content).Replace("<p>", "<p class=\"mb-1\">"))</span>
                        }
                        
                    </div>
                }
                <div class="d-inline-flex flex-row">
                    @if (_post.Board.Nsfw)
                    {
                        <span class="me-1 my-auto border border-1 border-danger text-danger rounded-3 p-1" style="font-size:smaller">NSFW</span>
                    }
                    <button class="p-0 me-3 btn btn-link text-decoration-none text-body fw-bold" @onclick="PermaLink">@_commentCount @(_commentCount == 1 ? "comment" : "comments")</button>
                    <AuthorizeView>
                        <Authorized>
                            @if (_post.AuthorId == _user.Id)
                            {
                                <button class="p-0 me-3 btn btn-link text-decoration-none text-body fw-bold" @onclick="Editing">edit</button>
                            }
                        </Authorized>
                    </AuthorizeView>
                    <button class="p-0 me-3 btn btn-link text-decoration-none text-muted fw-bold" @onclick="ShowSource">source</button>
                    <button class="p-0 me-3 btn btn-link text-decoration-none text-muted fw-bold" @onclick="PermaLink">permalink</button>
                    <button class="p-0 me-3 btn btn-link text-decoration-none text-muted fw-bold">report</button>
                </div>
            </div>
        </div>
    }
    

    <div class="border-bottom border-1 border-secondary" style="border-bottom-style: dotted !important">
        <span class="fs-4">all @_commentCount comments</span>
    </div>
    <div class="mb-3">
        <span class="text-muted d-inline-flex">sorted by: </span>
        <Dropdown TItem="string" OnSelected="OnSelected">
            <InitialTip>N/A</InitialTip>
            <ChildContent>
                <DropdownListItem Item="@_sortValues[0]">N/A</DropdownListItem>
                <DropdownListItem Item="@_sortValues[1]">None</DropdownListItem>
            </ChildContent>
        </Dropdown>
    </div>

    <AuthorizeView>
        <Authorized>
            <PostReplyElement ParentPost="_post" CommentAuthor="CurrentUser" />
        </Authorized>
        <NotAuthorized>
            <p>Please <a href="/login?returnurl=@NavMan.Uri">log in</a> or <a href="/register">register</a> to comment.</p>
        </NotAuthorized>
    </AuthorizeView>

    @if(_topComments.Any())
    {
        if(_singleComment)
        {
            <p class="text-muted my-3 ps-3 border-start border-5 border-warning bg-warning bg-opacity-10">Viewing a single comment thread - click <button class="btn btn-link p-0 m-0 pb-1" @onclick="FullComments">here</button> to load all comments.</p>
        }
        foreach(var c in _topComments)
        {
            <CommentElement Comment="c"></CommentElement>
        }
    }
    else
    {
        <p>No comments yet...</p>
    }
}
else
{
    <h3>The post <span class="font-monospace">@PostHash</span> does not exist...</h3>
}

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; } = new();
    [Parameter]
    public string BoardName { get; set; } = string.Empty;
    [Parameter]
    public string PostHash { get; set; } = string.Empty;
    [Parameter]
    public string CommentHash { get; set; } = string.Empty;

    Board _board = new();
    Post _post = new();
    User _author = new();
    User _user = new();
    List<Comment> _topComments = new();
    bool _postExists = true;
    bool _sortDropDownEnabled, _singleComment, _replying, _editing, _source;
    int _commentCount, _points, _lines;
    string _postType = "oi-copywriting";
    string _baseLink = string.Empty;
    string _link = "#";

    List<string> _sortValues = new() { "N/A", "None" };

    protected override async Task OnInitializedAsync()
    {
        _singleComment = !string.IsNullOrEmpty(CommentHash);

        var getBoard = await BoardService.GetBoardByNameAsync(BoardName);
        if(getBoard != null && getBoard.Success && getBoard.Data != null)
        {
            _board = getBoard.Data;
            if (Layout.CurrentBoard == null || Layout.CurrentBoard.Guid != _board.Guid)
            {
                Layout.CurrentBoard = _board;
            }
        }

        var getPost = await PostService.GetPostByHashIdAsync(PostHash);
        if (getPost != null && getPost.Success && getPost.Data != null)
        {
            _post = getPost.Data;

            var getAuthor = await UserService.GetUserByIdAsync(_post.AuthorId);
            if (getAuthor != null && getAuthor.Success && getAuthor.Data != null)
            {
                _author = getAuthor.Data;
            }
            if(_singleComment)
            {
                var comment = await CommentService.GetCommentByHashAsync(CommentHash);
                if(comment != null && comment.Success && comment.Data != null)
                {
                    _topComments.Add(comment.Data);
                }
            }
            else
            {
                var getComments = await CommentService.GetCommentsByPostHashAsync(PostHash);
                if (getComments != null && getComments.Success && getComments.Data != null)
                {
                    _topComments = getComments.Data;
                }
            }

            var getCount = await CommentService.CountCommentsByPostHashAsync(PostHash);
            if (getCount != null && getCount.Success)
            {
                _commentCount = getCount.Data;
            }

            _points = _post.VotesUp - _post.VotesDown;
        }
        else
        {
            _postExists = false;
        }
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if(!string.IsNullOrEmpty(token))
        {
            var user = await UserService.GetUserByTokenAsync(token);
            if (user != null)
            {
                if (user.Success && user.Data != null)
                {
                    _user = user.Data;
                }
            }
        }

        if (!string.IsNullOrEmpty(_post.Link))
        {
            _link = _post.Link;
            _postType = "oi-link-intact";
            var uri = new Uri(_post.Link);
            _baseLink = uri.Host;
        }
        else
        {
            _postType = "oi-copywriting";
            _baseLink = $"self.{_board.Name}";
        }

        _lines = _post.Content.Count(c => c.Equals('\n')) + 1;
    }

    void OnSelected()
    {
        
    }

    void FullComments()
    {
        NavMan.NavigateTo($"/b/{_post.Board.Name}/comments/{_post.HashId}", true);
    }

    void Editing()
    {
        _editing = true;
    }

    void ShowSource()
    {
        _source = true;
    }

    void PermaLink()
    {
        NavMan.NavigateTo($"/b/{_post.Board.Name}/comments/{_post.HashId}", true);
    }

    void Cancel()
    {
        _replying = false;
        _editing = false;
        _source = false;
    }
}
